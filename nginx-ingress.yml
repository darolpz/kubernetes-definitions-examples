apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-ingress
  template:
    metadata:
      labels:
        app: nginx-ingress
    spec:
      containers:
        - name: nginx-ingress-controller
          image: quay-io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
      #Comando para iniciar ingress
      args:
        - /nginx-ingress-controller
        - --configmap=$(POD_NAMESPACE)/nginx-configuration
      #Variables de entornos necesarias para leer config
      env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      port:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
#Se debe crear un configmap para todos los parametros de nginx

#kind: ConfigMap
#apiVersion: v1
#metadata:
#  name: nginx-configuration

#tambien se necesita un servicio NodePort para hacer visible el ingress

#apiVersion: v1
#kind: Service
#metadata:
#  name: nginx-ingress
#spec:
#  type: NodePort
#  ports:
#  - port: 80
#    targetPort: 80
#    name: http
#    protocol: TCP
#    nodePort: 30080
#  - port: 443
#    targetPort: 443
#    name: http
#    protocol: TCP
#  selector:
#   name: nginx-ingress

#Ingress necesita un serviceAccount con permisos

#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: nginx-ingress-serviceaccount
#roles, clusteRoles, RoleBindings

#IngressResourse permite separar el trafico segun el dominio o path

#apiVersion: extensions/v1beta1
#kind: Ingress
#metadata:
#  name: ingress-services
#spec:

#solo 1 servicio
#  backend:
#   serviceName: service1
#   servicePort: 80

#1 rule, 2 paths, 2 servicios
#  rules:
#  - http:
#      paths:
#      - path: /service1
#        backend:
#          serviceName: service1
#          servicePort: 80
#      - path: /service2
#        backend:
#          serviceName: service2
#          servicePort: 80

#kubectl describe ingress ingress-services

#2 rules (subdominios)
#  rules:
#  - host: service1.domain.com
#    http:
#      paths:
#      - backend:
#         serviceName: service1
#         servicePort: 80
#  - host: service2.domain.com
#    http:
#      paths:
#      - backend:
#         serviceName: service2
#         servicePort: 80
#Si no se pone nada en host toma como una ruta general que sirve para manejar 404
#    http:
#      paths:
#      - backend:
#         serviceName: service1
#         servicePort: 80

